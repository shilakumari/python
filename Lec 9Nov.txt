Quick Recap
Ex:
	x=10
	def foo():
		global x
		x += 1
		print(x)
	foo()#11

	print(1<2<3)#True - 1<2=True then (True value is 1) True<3=True
	print(1<(2<3))#False - (2<3)=True then 1<True=False
	print(2**2**3)#256 - 2**8= 256
Ex: List and List Comprehension 
	l=[1,2,3]
	l = l + [4]
	print(l)#[1, 2, 3, 4]

	a = [x**2 for x in range(5)]
	print(a)#[0, 1, 4, 9, 16]

	print([2,3,1].sort())#None - because sort() does not return anything
	l1=[2,3,1]
	l1.sort()
	print(l1)

2. find() and index()
	find()- return index, if not present return -1.
	index()- return index, if not present return ValueError.


3. Algorithms
1. What is Algorithms?
	An algorithm is a finite set of well-defined instructions for solving a specific problem or performing a computation.

	Characteristics of Algorithms:
	Input: Zero or more inputs are externally supplied.
	Output: At least one output is supplied
	Definiteness: Each step is precisely and unambiguously defined.
	Finiteness: The algorithm must terminate after finite number of steps.
	Effectiveness: All operations are basic enough to be performed exactly and in a finite amount of time.
	Algorithm:
		Set of rules/instructions
		Followed in calculations/problem
		Solving/performing computation
		Clear
		Inputs
		Outputs
		Finite
		Feasible
		Language Independent
		Deterministic and effective
	1 Algorithm:
	Swap two numbers
	1. Let x and y be integers
	2. Read values of x and y from users
	3. Take a temporary variable temp
	4. Assign temp to x
	5. Assign value of x to y
	6. Assign value of y to temp
		x=1,y=2
		temp=x
		x=y
		y=temp
	Algorithm 2:
	Algorithm for linear search
	1. go through each element in the input list
	2. if the element matches v, output its index
	3. if non of the element matches, print -1 or "element not found"
		l=[12,23,14,78], v=23
		index=-1
		for i in range(len(l)):
			if l[i]==v:
				index=i
		print(index)
		O(n) time complexity
		or,
		for i, value in enumerate(l):
			if v==value:
				index=i
		print(index)

	Algorithm 3:
	Binary Search: Efficient search for sorted lists.
		Dividing half of list each time to check element present in the list or not.
		so that time complexity is O(logn).

	1. Input: sorted list e.g. [1,3,6,9,5]
	2. Input: also has target t
	3. pick the middle element of list m
	4. if m is same as t, output index of m
	5. if m is greater than t, then repeat entire algorithm for list on the left of m
	6. if m is less than t, then repeat entire algorithm for list on the right of m 
		l=[0, 7, 10, 14, 45, 47], t= 45
		def binary_search(l, t):
			low, high = 0, len(l)-1
			while low<=high:
				mid = (low+high)//2
				if l[mid]==t:
					return mid
				elif l[mid]>t:
					high=mid-1
  				else:
					low = mid+1
			return -1
		print(binary_search(l,t))#4

	Algorithm 4:
	Bubble Sort: To sort list
	1. Input is list
	2. Output we want is sorted list
	3. Compare two elements to sort from left to right
	4. if two element are already sorted, then move to next pair
	5. if two element are not sorted, then swap
	6. repeat previous three steps till we reach end of the list
	7. now last element is fixed, so repeat previous four steps for list except last element
		l=[12,2,54,4,100]
		n=len(l)
		for i in range(n):
		    print(i)
		    for j in range(0,n-i-1):
		        if l[j]>l[j+1]:
		            l[j],l[j+1]=l[j+1],l[j]
		print(l)
	
4. Big O Notation
	O(1): constant time.
	O(logn): logerithmic time.
	O(n): linear time
	O(nlogn): linearithmic time.
	O(n^2): Quadratic time.
	Ex: Accessing an element by index in a list is O(1).


5. Brute Force Approach
	A straightforward method to solve problems by tying all possible configurations.
	Chararcteristics:
		Simplicity: Easy to implement.
		Exhaustive: Check all possibilities.
	When to use:
		Problem size is small.
		No known efficient algorithms.
	Ex: Lock combination example
		When we forgot 3-digit lock combination.
		Brute Force Solution:	
			Try all combinations from 000 to 999.
		Total Attempts: 1000 possible combinations.



	



